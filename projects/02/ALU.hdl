// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Handle zx and zy
   Mux16(a=x, b=false, sel=zx, out=XorZ); // X or Zero based on zx
   Mux16(a=y, b=false, sel=zy, out=YorZ); // Y or Zero based on zy

    // Handle nx and ny
    Not16(in=XorZ, out=notX); // Negate X or Zero
    Not16(in=YorZ, out=notY); // Negate Y or Zero
    Mux16(a=XorZ, b=notX, sel=nx, out=XorNotX); // Choose Negated X or X (or Zero) based on nx input
    Mux16(a=YorZ, b=notY, sel=ny, out=YorNotY); // Choose Negated Y or Y (or Zero) based on ny input

    // Handle the functions
    And16(a=XorNotX, b=YorNotY, out=XandY); // And X and Y
    Add16(a=XorNotX, b=YorNotY, out=XaddY); // Add X and Y
    Mux16(a=XandY, b=XaddY, sel=f, out=functionOut); // Choose And or Add based on f input

    // Start outputting our value, we can also figure out if the last digit is 1, which would mean the output is negative
    Not16(in=functionOut, out=notFunctionOut); // Negate the output
    Mux16(a=functionOut, b=notFunctionOut, sel=no, out[15]=ng, out[0..7]=first8, out[8..15]=last8, out=out);
    // We split the output into 8-bit chunks
    // So that we can use the Or8Way to check for 1s
    // Also, the last digit of output will determine negativity, so we can output that to ng

    // Check our 2 8-bit chunks for any 1s
    Or8Way(in=first8, out=nonZeroOne); // Check the first 8-bit chunk for 1s
    Or8Way(in=last8, out=nonZeroTwo); // Check the last 8-bit chunk for 1s
    Or(a=nonZeroOne, b=nonZeroTwo, out=nonZeroAll); // Check if either chunk had 1s
    Not(in=nonZeroAll, out=zr); // If Neither chunk contained a 1, then nonZeroAll is 1, meaning that zr should be 0, so just Not nonZeroAll
}
